{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/enviroment/enviroment';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst URL = environment.url;\nconst token = localStorage.getItem('token') ?? '';\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(form) {\n    let direccion = `${URL}/api/Auth`;\n    return this.http.post(direccion, {\n      Email: form.Email,\n      Password: form.Password\n    });\n  }\n  dashboard() {\n    let direccion = `${URL}/api/Platforms`;\n    let headers = new HttpHeaders();\n    const token = localStorage.getItem('token');\n    if (token) {\n      headers = headers.append('authorization', token);\n    }\n    return this.http.get(direccion, {\n      headers\n    }).pipe(map(response => {\n      const data = {\n        data: response.data\n      };\n      return data;\n    }));\n  }\n  dashboardID(id) {\n    let direccion = `${URL}/api/Platforms/${id}`;\n    return this.http.get(direccion, {\n      headers: new HttpHeaders({\n        'authorization': token\n      })\n    }).pipe(map(response => {\n      const data = {\n        data: response.data\n      };\n      return data;\n    }));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAoBA,WAAW,QAAQ,sBAAsB;AAC7D,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAAqBC,GAAG,QAAQ,MAAM;;;AAItC,MAAMC,GAAG,GAAGF,WAAW,CAACG,GAAG;AAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;AAKjD,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAGxB;EACAC,KAAK,CAACC,IAAU;IACd,IAAIC,SAAS,GAAG,GAAGV,GAAG,WAAW;IACjC,OAAO,IAAI,CAACO,IAAI,CAACI,IAAI,CAACD,SAAS,EAAC;MAC9BE,KAAK,EAAGH,IAAI,CAACG,KAAK;MAClBC,QAAQ,EAAGJ,IAAI,CAACI;KACjB,CAAC;EACJ;EAGAC,SAAS;IACP,IAAIJ,SAAS,GAAG,GAAGV,GAAG,gBAAgB;IACtC,IAAIe,OAAO,GAAG,IAAIlB,WAAW,EAAE;IAE/B,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTa,OAAO,GAAGA,OAAO,CAACC,MAAM,CAAC,eAAe,EAAEd,KAAK,CAAC;;IAGlD,OAAO,IAAI,CAACK,IAAI,CAACU,GAAG,CAAOP,SAAS,EAAE;MAAEK;IAAO,CAAE,CAAC,CAACG,IAAI,CACrDnB,GAAG,CAAEoB,QAAa,IAAI;MACpB,MAAMC,IAAI,GAAc;QACtBA,IAAI,EAAED,QAAQ,CAACC;OAChB;MACD,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAGAC,WAAW,CAACC,EAAS;IACnB,IAAIZ,SAAS,GAAG,GAAGV,GAAG,kBAAkBsB,EAAE,EAAE;IAC5C,OAAO,IAAI,CAACf,IAAI,CAACU,GAAG,CAAOP,SAAS,EAAC;MACnCK,OAAO,EAAG,IAAIlB,WAAW,CAAC;QACxB,eAAe,EAAEK;OAClB;KACF,CAAC,CAACgB,IAAI,CACLnB,GAAG,CAAEoB,QAAa,IAAI;MACpB,MAAMC,IAAI,GAAc;QACtBA,IAAI,EAAED,QAAQ,CAACC;OAChB;MACD,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;;AAhDWf,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAkB,SAAVlB,UAAU;EAAAmB,YAFT;AAAM","names":["HttpHeaders","environment","map","URL","url","token","localStorage","getItem","ApiService","constructor","http","login","form","direccion","post","Email","Password","dashboard","headers","append","get","pipe","response","data","dashboardID","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Raygust\\Desktop\\Renzo\\Prueba_Tecnica\\prueba_tecnica\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {  Login, Platforms } from '../model/interfaces.interface';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/enviroment/enviroment';\nimport { Observable, map } from 'rxjs';\n\nimport { Data } from '../model/interfaces.interface';\n\nconst URL = environment.url;\nconst token = localStorage.getItem('token') ?? '';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  constructor(private http:HttpClient) {\n\n\n  }\n  login(form:Login):Observable<any>{\n    let direccion = `${URL}/api/Auth`\n    return this.http.post(direccion,{\n      Email : form.Email,\n      Password : form.Password\n    });\n  }\n\n\n  dashboard(): Observable<Platforms>{\n    let direccion = `${URL}/api/Platforms`;\n    let headers = new HttpHeaders();\n\n    const token = localStorage.getItem('token');\n    if (token) {\n      headers = headers.append('authorization', token);\n    }\n\n    return this.http.get<Data>(direccion, { headers }).pipe(\n      map((response: any) => {\n        const data: Platforms = {\n          data: response.data\n        };\n        return data;\n      })\n    );\n  }\n\n\n  dashboardID(id:string): Observable<Platforms>{\n    let direccion = `${URL}/api/Platforms/${id}`\n    return this.http.get<Data>(direccion,{\n      headers : new HttpHeaders({\n        'authorization': token\n      })\n    }).pipe(\n      map((response: any) => {\n        const data: Platforms = {\n          data: response.data\n        };\n        return data;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}