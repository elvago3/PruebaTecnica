{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/enviroment/enviroment';\nimport { Observable, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst URL = environment.url;\nconst token = localStorage.getItem('token') ?? '';\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(form) {\n    let direccion = `${URL}/api/Auth`;\n    return this.http.post(direccion, {\n      Email: form.Email,\n      Password: form.Password\n    });\n  }\n  dashboard() {\n    return this.getToken().pipe(filter(token => token !== null), switchMap(token => {\n      const direccion = `${URL}/api/Platforms`;\n      return this.http.get(direccion, {\n        headers: new HttpHeaders({\n          'authorization': token\n        })\n      }).pipe(map(response => {\n        const data = {\n          data: response.data\n        };\n        return data;\n      }));\n    }));\n  }\n  getToken() {\n    return new Observable(observer => {\n      const token = localStorage.getItem('token');\n      observer.next(token);\n      observer.complete();\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAoBA,WAAW,QAAQ,sBAAsB;AAC7D,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;AAItC,MAAMC,GAAG,GAAGH,WAAW,CAACI,GAAG;AAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;AAKjD,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAGxB;EACAC,KAAK,CAACC,IAAU;IACd,IAAIC,SAAS,GAAG,GAAGV,GAAG,WAAW;IACjC,OAAO,IAAI,CAACO,IAAI,CAACI,IAAI,CAACD,SAAS,EAAC;MAC9BE,KAAK,EAAGH,IAAI,CAACG,KAAK;MAClBC,QAAQ,EAAGJ,IAAI,CAACI;KACjB,CAAC;EACJ;EAGAC,SAAS;IACP,OAAO,IAAI,CAACC,QAAQ,EAAE,CAACC,IAAI,CACzBC,MAAM,CAACf,KAAK,IAAIA,KAAK,KAAK,IAAI,CAAC,EAC/BgB,SAAS,CAAChB,KAAK,IAAG;MAChB,MAAMQ,SAAS,GAAG,GAAGV,GAAG,gBAAgB;MACxC,OAAO,IAAI,CAACO,IAAI,CAACY,GAAG,CAAOT,SAAS,EAAE;QACpCU,OAAO,EAAE,IAAIxB,WAAW,CAAC;UACvB,eAAe,EAAEM;SAClB;OACF,CAAC,CAACc,IAAI,CACLjB,GAAG,CAAEsB,QAAa,IAAI;QACpB,MAAMC,IAAI,GAAc;UACtBA,IAAI,EAAED,QAAQ,CAACC;SAChB;QACD,OAAOA,IAAI;MACb,CAAC,CAAC,CACH;IACH,CAAC,CAAC,CACH;EACH;EAEAP,QAAQ;IACN,OAAO,IAAIjB,UAAU,CAAgByB,QAAQ,IAAG;MAC9C,MAAMrB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CmB,QAAQ,CAACC,IAAI,CAACtB,KAAK,CAAC;MACpBqB,QAAQ,CAACE,QAAQ,EAAE;IACrB,CAAC,CAAC;EACJ;;AAzCWpB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAqB,SAAVrB,UAAU;EAAAsB,YAFT;AAAM","names":["HttpHeaders","environment","Observable","map","URL","url","token","localStorage","getItem","ApiService","constructor","http","login","form","direccion","post","Email","Password","dashboard","getToken","pipe","filter","switchMap","get","headers","response","data","observer","next","complete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Raygust\\Desktop\\Renzo\\Prueba_Tecnica\\prueba_tecnica\\src\\app\\services\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {  Login, Platforms } from '../model/interfaces.interface';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/enviroment/enviroment';\nimport { Observable, map } from 'rxjs';\n\nimport { Data } from '../model/interfaces.interface';\n\nconst URL = environment.url;\nconst token = localStorage.getItem('token') ?? '';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  constructor(private http:HttpClient) {\n\n\n  }\n  login(form:Login):Observable<any>{\n    let direccion = `${URL}/api/Auth`\n    return this.http.post(direccion,{\n      Email : form.Email,\n      Password : form.Password\n    });\n  }\n\n\n  dashboard(): Observable<Platforms> {\n    return this.getToken().pipe(\n      filter(token => token !== null),\n      switchMap(token => {\n        const direccion = `${URL}/api/Platforms`;\n        return this.http.get<Data>(direccion, {\n          headers: new HttpHeaders({\n            'authorization': token\n          })\n        }).pipe(\n          map((response: any) => {\n            const data: Platforms = {\n              data: response.data\n            };\n            return data;\n          })\n        );\n      })\n    );\n  }\n\n  getToken(): Observable<string | null> {\n    return new Observable<string | null>(observer => {\n      const token = localStorage.getItem('token');\n      observer.next(token);\n      observer.complete();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}